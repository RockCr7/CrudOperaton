package com.lcwd.DocPat.entities;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

@Entity
public class User implements UserDetails{
	
	@Id
	private int id;
	private String username;
	private String password;

	@ManyToMany
	@JoinTable(name="user_role",
			   joinColumns =@JoinColumn(name="user",referencedColumnName = "id"),
			   inverseJoinColumns = @JoinColumn(name="role",referencedColumnName = "id"))
	Set<Role> setOfRole=new HashSet<>();

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Set<Role> getSetOfRole() {
		return setOfRole;
	}

	public void setSetOfRole(Set<Role> setOfRole) {
		this.setOfRole = setOfRole;
	}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		List<SimpleGrantedAuthority> collect = setOfRole.stream().map(role-> new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList());
		return collect;
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}
	
	
}
